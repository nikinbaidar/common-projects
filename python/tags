!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/nikin/projects/common-projects/python/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
Automobile	./OOP/Automobile.py	/^class Automobile:$/;"	c
Car	./OOP/Automobile.py	/^class Car(Automobile):$/;"	c
DFT	./ImageProcessing/dft2D.py	/^def DFT(intensity_image, shift=False):$/;"	f
GeometricShapes	./OOP/test.py	/^class GeometricShapes:$/;"	c
IDFT	./ImageProcessing/dft2D.py	/^def IDFT(frequency_image):$/;"	f
MethodOverloading	./methodoverloading.py	/^class MethodOverloading:$/;"	c
MyScaler	./NeuralNetworks/minmaxscaler.py	/^def MyScaler(array):$/;"	f
NodeTree	./ImageProcessing/huffman_code.py	/^class NodeTree(object):$/;"	c
X	./NeuralNetworks/lab2.py	/^X = np.array([$/;"	v
_	./ImageProcessing/region_based_segmentation.py	/^markers, _ = nd.label(mask)$/;"	v
__init__	./ImageProcessing/huffman_code.py	/^    def __init__(self, left=None, right=None):$/;"	m	class:NodeTree
__init__	./OOP/Automobile.py	/^    def __init__(self, name, max_speed, milegae):$/;"	m	class:Automobile
__init__	./OOP/test.py	/^    def __init__(self, radius):$/;"	m	class:circle
__init__	./OOP/test.py	/^    def __init__(self,length):$/;"	m	class:square
__init__	./OOP/test.py	/^    def __init__(self,length,breadth):$/;"	m	class:rectangle
__str__	./ImageProcessing/huffman_code.py	/^    def __str__(self):$/;"	m	class:NodeTree
__str__	./OOP/Automobile.py	/^    def __str__(self):$/;"	m	class:Automobile
a	./ImageProcessing/test.py	/^a  = np.array([np.arange(1,4), np.arange(4,7), np.arange(7,10)])$/;"	v
a	./indexes.py	/^a = np.array(['a','b','c','d','e','f','g','h'])$/;"	v
add	./methodoverloading.py	/^def add(a, b):$/;"	f
add	./methodoverloading.py	/^def add(a, b, c):$/;"	f
addGaussianNoise	./ImageProcessing/create_noise.py	/^def addGaussianNoise(image, MEAN, VARIANCE):$/;"	f
addPadding	./ImageProcessing/convolution.py	/^def addPadding(image, borderType='zero|replicate', depth=1):$/;"	f
addPadding	./random-test.py	/^def addPadding(image, borderType='zero|replicate', depth=(1,1)):$/;"	f
addPositive	./helloworld.py	/^def addPositive(a, b):$/;"	f
addSpeckleNoise	./ImageProcessing/create_noise.py	/^def addSpeckleNoise(image, scale):$/;"	f
addSpeckleNoise2	./ImageProcessing/create_noise.py	/^def addSpeckleNoise2(image, MEAN, VARIANCE):$/;"	f
adder	./methodoverloading.py	/^adder = MethodOverloading()$/;"	v
applyBoxBlurring	./ImageProcessing/spatial_filtering.py	/^def applyBoxBlurring(src, size, strength=1):$/;"	f
applyCanny	./ImageProcessing/edge_detection.py	/^def applyCanny(src, lower_bound, upper_bound, size=3):$/;"	f
applyGaussinaSmoothing	./ImageProcessing/spatial_filtering.py	/^def applyGaussinaSmoothing(src, size, strength=1):$/;"	f
applyLaplacianFilter	./ImageProcessing/spatial_filtering.py	/^def applyLaplacianFilter(src):$/;"	f
applyPrewitt	./ImageProcessing/spatial_filtering.py	/^def applyPrewitt(src, size):$/;"	f
applySobel	./ImageProcessing/spatial_filtering.py	/^def applySobel(src, size) :$/;"	f
area	./OOP/test.py	/^    def area(self):$/;"	m	class:circle
area	./OOP/test.py	/^    def area(self):$/;"	m	class:rectangle
area	./OOP/test.py	/^    def area(self):$/;"	m	class:square
area	./OOP/test.py	/^def area(shape):$/;"	f
ax	./ImageProcessing/region_based_segmentation.py	/^ax = axes.ravel()$/;"	v
axes	./ImageProcessing/region_based_segmentation.py	/^fig, axes = plt.subplots(ncols=3, figsize=(9, 3), sharex=True, sharey=True)$/;"	v
capacity	./OOP/Automobile.py	/^    capacity = 2$/;"	v	class:Automobile
capacity	./OOP/Automobile.py	/^    capacity = 4$/;"	v	class:Car
car1	./OOP/Automobile.py	/^car1 = Car("Volvo", 180, 20)$/;"	v
categoricalData	./NeuralNetworks/oneHotEncoding.py	/^categoricalData = numpy.array([['protocol_type'], ['service'], ['flag']])$/;"	v
char	./isvowel.py	/^char = 'x'$/;"	v
checkEqual	./NeuralNetworks/lab2.py	/^def checkEqual(X, y, theta):$/;"	f
children	./ImageProcessing/huffman_code.py	/^    def children(self):$/;"	m	class:NodeTree
circle	./OOP/test.py	/^class circle(GeometricShapes):$/;"	c
compressed	./ImageProcessing/run_length.py	/^compressed = [m, n]$/;"	v
compressed	./ImageProcessing/run_length.py	/^compressed = np.array(compressed)$/;"	v
computeCDF	./ImageProcessing/histogram_equalization.py	/^  def computeCDF(histogram):$/;"	f	function:equalilzeHistogram	file:
conv	./ImageProcessing/image_restoration.py	/^import convolution as conv$/;"	I	nameref:module:convolution
convolve	./ImageProcessing/convolution.py	/^def convolve(image, filter, mode=0, addBorder=False, borderType='zero'):$/;"	f
current_pixel	./ImageProcessing/run_length.py	/^        current_pixel = image[i,j]$/;"	v
current_pixel_count	./ImageProcessing/run_length.py	/^    current_pixel_count = 1$/;"	v
cv	./ImageProcessing/convolution.py	/^import cv2 as cv$/;"	I	nameref:module:cv2
cv	./ImageProcessing/edge_detection.py	/^import cv2 as cv $/;"	I	nameref:module:cv2
cv	./ImageProcessing/entropy.py	/^import cv2 as cv$/;"	I	nameref:module:cv2
cv	./ImageProcessing/image_restoration.py	/^import cv2 as cv$/;"	I	nameref:module:cv2
cv	./ImageProcessing/morphological.py	/^import cv2 as cv$/;"	I	nameref:module:cv2
cv	./ImageProcessing/otsu.py	/^import cv2 as cv$/;"	I	nameref:module:cv2
cv	./ImageProcessing/region_based_segmentation.py	/^import cv2 as cv$/;"	I	nameref:module:cv2
cv	./ImageProcessing/run_length.py	/^import cv2 as cv$/;"	I	nameref:module:cv2
cv	./ImageProcessing/spatial_filtering.py	/^import cv2 as cv $/;"	I	nameref:module:cv2
cv	./ImageProcessing/variable_length.py	/^import cv2 as cv$/;"	I	nameref:module:cv2
dft	./ImageProcessing/image_restoration.py	/^import dft2D as dft$/;"	I	nameref:module:dft2D
dilute	./ImageProcessing/morphological.py	/^def dilute(image, structuring_element):$/;"	f
distance_map	./ImageProcessing/region_based_segmentation.py	/^distance_map = nd.distance_transform_edt(thresh)$/;"	v
entropy	./ImageProcessing/variable_length.py	/^image_hist, entropy = getEntropy(image)$/;"	v
equalilzeHistogram	./ImageProcessing/histogram_equalization.py	/^def equalilzeHistogram(histogram, resolution):$/;"	f
erode	./ImageProcessing/morphological.py	/^def erode(image, structuring_element, addBorder=False, iterations=1):$/;"	f
existing_pixels	./ImageProcessing/variable_length.py	/^existing_pixels = np.array([i for i in range(len(image_hist))$/;"	v
fig	./ImageProcessing/region_based_segmentation.py	/^fig, axes = plt.subplots(ncols=3, figsize=(9, 3), sharex=True, sharey=True)$/;"	v
finalTheta	./NeuralNetworks/lab2.py	/^finalTheta = output['theta']$/;"	v
freq	./ImageProcessing/huffman_code.py	/^freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)$/;"	v
freq	./ImageProcessing/huffman_code.py	/^freq = {}$/;"	v
frequency2spatial	./ImageProcessing/dft2D.py	/^def frequency2spatial(frequency_image):$/;"	f
gcd	./hcf.py	/^def gcd(num1,num2):$/;"	f
getAnchor	./ImageProcessing/morphological.py	/^    def getAnchor(m,n):$/;"	f	function:dilute	file:
getCrossEntropyLoss	./NeuralNetworks/lab2.py	/^def getCrossEntropyLoss(y, sigmoidX):$/;"	f
getCrossEntropyLossGradient	./NeuralNetworks/lab2.py	/^def getCrossEntropyLossGradient(X, y, sigmoidProbability):$/;"	f
getEntropy	./ImageProcessing/entropy.py	/^def getEntropy(image):$/;"	f
getEntropy	./ImageProcessing/variable_length.py	/^def getEntropy(image):$/;"	f
getFrequency	./ImageProcessing/dft2D.py	/^    def getFrequency(u, v):$/;"	f	function:DFT	file:
getGaussianFilter	./ImageProcessing/image_restoration.py	/^def getGaussianFilter(size, sigma=1.0):$/;"	f
getGaussianFilter	./ImageProcessing/spatial_filtering.py	/^    def getGaussianFilter(size, sigma=1.0):$/;"	f	function:applyGaussinaSmoothing	file:
getGaussianFilterUsingLoop	./ImageProcessing/spatial_filtering.py	/^    def getGaussianFilterUsingLoop(size):$/;"	f	function:applyGaussinaSmoothing	file:
getHist	./ImageProcessing/entropy.py	/^def getHist(image):$/;"	f
getIntensity	./ImageProcessing/dft2D.py	/^    def getIntensity(u, v):$/;"	f	function:IDFT	file:
getIntraCLassVariance	./ImageProcessing/otsu.py	/^    def getIntraCLassVariance(threshold):$/;"	f	function:main	file:
getLinearGradient	./NeuralNetworks/lab1.py	/^def getLinearGradient(x, y, theta):$/;"	f
getLinearPrediction	./NeuralNetworks/lab1.py	/^def getLinearPrediction(x, theta):$/;"	f
getLoss	./NeuralNetworks/lab1.py	/^def getLoss(x, y, theta):$/;"	f
getPSF	./random-test.py	/^def getPSF(image, wanted_depth):$/;"	f
getPrediction	./NeuralNetworks/lab2.py	/^def getPrediction(sigmoidProbability):$/;"	f
getSampleLength	./NeuralNetworks/lab1.py	/^def getSampleLength(y):$/;"	f
houghTransform	./ImageProcessing/edge_detection.py	/^def houghTransform(src):$/;"	f
huffmanCode	./ImageProcessing/huffman_code.py	/^huffmanCode = huffman_code_tree(nodes[0][0])$/;"	v
huffman_code_tree	./ImageProcessing/huffman_code.py	/^def huffman_code_tree(node, left=True, binString=''):$/;"	f
image	./ImageProcessing/run_length.py	/^image = np.array([$/;"	v
image	./ImageProcessing/typecasting_images.py	/^image = numpy.array([0, 0.5, 0.503, 1.])$/;"	v
image	./ImageProcessing/typecasting_images.py	/^image = skimage.util.img_as_float(image)$/;"	v
image	./ImageProcessing/typecasting_images.py	/^image = skimage.util.img_as_ubyte(image)$/;"	v
image	./ImageProcessing/variable_length.py	/^image = cv.imread('.\/images\/Lenna.png', 0);$/;"	v
image	./random-test.py	/^image = [[1, 2, 3], [4,5,6], [7,8,9]]$/;"	v
image	./random-test.py	/^image = np.array(image)$/;"	v
image_hist	./ImageProcessing/variable_length.py	/^image_hist, entropy = getEntropy(image)$/;"	v
isVowel	./isvowel.py	/^def isVowel(char):$/;"	f
labels	./dicttest.py	/^labels =  {$/;"	v
linearRegression	./NeuralNetworks/lab1.py	/^def linearRegression(x, y, alpha, iterations):$/;"	f
local_max	./ImageProcessing/region_based_segmentation.py	/^local_max = peak_local_max(distance_map, min_distance=20, labels=thresh)$/;"	v
logarithmically_transform	./ImageProcessing/logarithmic_transformation.py	/^def logarithmically_transform(image, output_datatype=numpy.uint8):$/;"	f
losses	./NeuralNetworks/lab2.py	/^losses = output['losses']$/;"	v
m	./ImageProcessing/run_length.py	/^m, n = image.shape[0], image.shape[1]$/;"	v
main	./ImageProcessing/contrast_streching.py	/^def main():$/;"	f
main	./ImageProcessing/convolution.py	/^def main():$/;"	f
main	./ImageProcessing/create_noise.py	/^def main():$/;"	f
main	./ImageProcessing/dft2D.py	/^def main():$/;"	f
main	./ImageProcessing/edge_detection.py	/^def main():$/;"	f
main	./ImageProcessing/entropy.py	/^def main():$/;"	f
main	./ImageProcessing/histogram_equalization.py	/^def main():$/;"	f
main	./ImageProcessing/image_restoration.py	/^def main():$/;"	f
main	./ImageProcessing/logarithmic_transformation.py	/^def main():$/;"	f
main	./ImageProcessing/morphological.py	/^def main():$/;"	f
main	./ImageProcessing/otsu.py	/^def main():$/;"	f
main	./ImageProcessing/spatial_filtering.py	/^def main():$/;"	f
main	./NeuralNetworks/lab1.py	/^def main():$/;"	f
mapping	./ImageProcessing/variable_length.py	/^mapping = {existing_pixels[i]: pixel_frequencies[i] for i in range(len(existing_pixels))}$/;"	v
mapping_sorted	./ImageProcessing/variable_length.py	/^mapping_sorted = sorted(mapping.items(), key=lambda x:x[1])$/;"	v
markers	./ImageProcessing/region_based_segmentation.py	/^markers, _ = nd.label(mask)$/;"	v
mask	./ImageProcessing/region_based_segmentation.py	/^mask = np.zeros_like(distance_map, dtype=bool)$/;"	v
medianFilter	./ImageProcessing/convolution.py	/^def medianFilter(image, k, addBorder=False):$/;"	f
minFilter	./ImageProcessing/convolution.py	/^def minFilter(image, k, addBorder=False):$/;"	f
model	./NeuralNetworks/scikitlearn-logistic.py	/^model = train(x,y)$/;"	v
n	./ImageProcessing/run_length.py	/^m, n = image.shape[0], image.shape[1]$/;"	v
nd	./ImageProcessing/region_based_segmentation.py	/^import scipy.ndimage as nd$/;"	I	nameref:module:scipy.ndimage
new	./ImageProcessing/region_based_segmentation.py	/^new = watershed(-distance_map, markers, mask=src)$/;"	v
node	./ImageProcessing/huffman_code.py	/^    node = NodeTree(key1, key2)$/;"	v
nodes	./ImageProcessing/huffman_code.py	/^    def nodes(self):$/;"	m	class:NodeTree
nodes	./ImageProcessing/huffman_code.py	/^    nodes = nodes[:-2]$/;"	v
nodes	./ImageProcessing/huffman_code.py	/^    nodes = sorted(nodes, key=lambda x: x[1], reverse=True)$/;"	v
nodes	./ImageProcessing/huffman_code.py	/^nodes = freq$/;"	v
nodes	./ImageProcessing/variable_length.py	/^nodes = mapping_sorted$/;"	v
np	./ImageProcessing/convolution.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/dft2D.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/edge_detection.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/entropy.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/image_restoration.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/morphological.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/otsu.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/region_based_segmentation.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/run_length.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/spatial_filtering.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/test.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./ImageProcessing/variable_length.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./NeuralNetworks/lab2.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./dicttest.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./generate-error.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./indexes.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	./random-test.py	/^import numpy as np$/;"	I	nameref:module:numpy
numbers	./NeuralNetworks/minmaxscaler.py	/^numbers = [1, 2, 3, 4]$/;"	v
numbers	./NeuralNetworks/minmaxscaler.py	/^numbers = numpy.array(numbers).reshape(-1,1)$/;"	v
output	./NeuralNetworks/lab2.py	/^output = performLogisticRegression(X, y, 2.7182, 25000)$/;"	v
padding	./ImageProcessing/image_restoration.py	/^def padding(image, wanted_depth):$/;"	f
pause	./ImageProcessing/convolution.py	/^def pause():$/;"	f
pause	./myfunctions.py	/^def pause():$/;"	f
performLogisticRegression	./NeuralNetworks/lab2.py	/^def performLogisticRegression(X, y, alpha, iterations):$/;"	f
pixel_frequencies	./ImageProcessing/variable_length.py	/^pixel_frequencies = np.array([int(image_hist[i][0])$/;"	v
pixels	./ImageProcessing/run_length.py	/^pixels = []$/;"	v
plotDecisionBoundary	./NeuralNetworks/lab2.py	/^def plotDecisionBoundary(X, y, theta):$/;"	f
plotHistogram	./ImageProcessing/contrast_streching.py	/^def plotHistogram(image_histogram, processed_image_histogram, plotTitle=""):$/;"	f
plotHistogram	./ImageProcessing/create_noise.py	/^def plotHistogram(processed_image, plotTitle="", bins=256):$/;"	f
plotHistogram	./ImageProcessing/logarithmic_transformation.py	/^def plotHistogram(input_image, processed_image, plotTitle="", bins=256):$/;"	f
plotLosses	./NeuralNetworks/lab2.py	/^def plotLosses(losses):$/;"	f
plt	./ImageProcessing/image_restoration.py	/^from matplotlib import pyplot as plt$/;"	x	nameref:unknown:pyplot
plt	./ImageProcessing/region_based_segmentation.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
psf	./random-test.py	/^psf = getPSF(image, wanted_shape)$/;"	v
randomList	./remove-fist-element.py	/^randomList = sample(range(0,22) ,10)$/;"	v
randomListModified	./remove-fist-element.py	/^randomListModified= randomList[1:] # remove the first element$/;"	v
ranges	./ImageProcessing/test.py	/^ranges = {$/;"	v
rectangle	./OOP/test.py	/^class rectangle(GeometricShapes):$/;"	c
remapTheta	./ImageProcessing/edge_detection.py	/^    def remapTheta(theta):$/;"	f	function:applyCanny	file:
remapTheta	./ImageProcessing/test.py	/^def remapTheta(value):$/;"	f
removePadding	./ImageProcessing/convolution.py	/^def removePadding(paddedImage, depth=1):$/;"	f
replicateBorder	./ImageProcessing/convolution.py	/^    def replicateBorder(image):$/;"	f	function:addPadding	file:
replicateBorder	./random-test.py	/^    def replicateBorder(image):$/;"	f	function:addPadding	file:
resetCounter_UpdateList	./ImageProcessing/run_length.py	/^def resetCounter_UpdateList():$/;"	f
scaled	./NeuralNetworks/oneHotEncoding.py	/^scaled = OneHotEncoder().fit_transform(categoricalData).toarray()$/;"	v
scaled_array	./NeuralNetworks/minmaxscaler.py	/^scaled_array = scaler.fit_transform(numbers)$/;"	v
scaler	./NeuralNetworks/minmaxscaler.py	/^scaler = MinMaxScaler()$/;"	v
seating_capacity	./OOP/Automobile.py	/^    def seating_capacity(self):$/;"	m	class:Automobile
shape1	./OOP/test.py	/^shape1 = square(5)$/;"	v
shape2	./OOP/test.py	/^shape2 = rectangle(3,4)$/;"	v
shape3	./OOP/test.py	/^shape3 = circle(1)$/;"	v
sigmoid	./NeuralNetworks/lab2.py	/^def sigmoid(arg):$/;"	f
spatial2frequency	./ImageProcessing/dft2D.py	/^def spatial2frequency(intensity_image, shift=False):$/;"	f
square	./OOP/test.py	/^class square(GeometricShapes):$/;"	c
square	./square-list.py	/^def square(array):$/;"	f
src	./ImageProcessing/region_based_segmentation.py	/^src = cv.imread(".\/images\/stock-photo.duckduckgo.com.jpg", 0)$/;"	v
strechContrast	./ImageProcessing/contrast_streching.py	/^def strechContrast(image, hist):$/;"	f
string	./ImageProcessing/huffman_code.py	/^string = 'BCAADDDCCACACAC'$/;"	v
sum	./methodoverloading.py	/^    def sum(a, b):$/;"	m	class:MethodOverloading
sum	./methodoverloading.py	/^    def sum(a, b, c):$/;"	m	class:MethodOverloading
thresh	./ImageProcessing/region_based_segmentation.py	/^thresh = cv.threshold(src, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)[1]$/;"	v
train	./NeuralNetworks/scikitlearn-logistic.py	/^def train (x,y):$/;"	f
transformHistogram	./ImageProcessing/histogram_equalization.py	/^def transformHistogram(image):$/;"	f
urls	./dicttest.py	/^urls =  {$/;"	v
wanted_shape	./random-test.py	/^wanted_shape = (23,24)$/;"	v
x	./NeuralNetworks/scikitlearn-logistic.py	/^x = csr_matrix(x, dtype=numpy.float64).toarray()$/;"	v
x	./NeuralNetworks/scikitlearn-logistic.py	/^x = numpy.array([$/;"	v
x	./generate-error.py	/^x = [4, 0, 65, 'a']$/;"	v
x	./generate-error.py	/^x = np.zeros(3)$/;"	v
x	./square-list.py	/^x = [1, 2]$/;"	v
x_new	./NeuralNetworks/scikitlearn-logistic.py	/^x_new = [[0.79, 0.70]]$/;"	v
y	./NeuralNetworks/lab2.py	/^y = np.array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]).reshape(-1,1)$/;"	v
y	./NeuralNetworks/scikitlearn-logistic.py	/^y = csr_matrix(y).toarray()$/;"	v
y	./NeuralNetworks/scikitlearn-logistic.py	/^y = numpy.array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], dtype=numpy.float64)$/;"	v
y	./NeuralNetworks/scikitlearn-logistic.py	/^y = numpy.ravel(y)$/;"	v
y_new	./NeuralNetworks/scikitlearn-logistic.py	/^y_new = model.predict(x_new)$/;"	v
zeroPadding	./ImageProcessing/convolution.py	/^    def zeroPadding(image):$/;"	f	function:addPadding	file:
